package auto.cn.greendaogenerate;

import java.util.List;
import auto.cn.greendaogenerate.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "AREA_LIST".
 */
public class AreaList {

    private Long id;
    private Integer PL_AREA_ID;
    private String PL_AREA_NAME;
    private String PL_AREA_LABEL;
    private String PL_AREA_CREATE_ID;
    private String PL_AREA_CREATE_DATE;
    private Integer Valid_Flag;
    private String PlanId;
    private String AREA_NORNAL;
    private Boolean AREA_FINISH;
    private Long fk_plan;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient AreaListDao myDao;

    private PlanList planList;
    private Long planList__resolvedKey;

    private List<Equiplist> equips;

    public AreaList() {
    }

    public AreaList(Long id) {
        this.id = id;
    }

    public AreaList(Long id, Integer PL_AREA_ID, String PL_AREA_NAME, String PL_AREA_LABEL, String PL_AREA_CREATE_ID, String PL_AREA_CREATE_DATE, Integer Valid_Flag, String PlanId, String AREA_NORNAL, Boolean AREA_FINISH, Long fk_plan) {
        this.id = id;
        this.PL_AREA_ID = PL_AREA_ID;
        this.PL_AREA_NAME = PL_AREA_NAME;
        this.PL_AREA_LABEL = PL_AREA_LABEL;
        this.PL_AREA_CREATE_ID = PL_AREA_CREATE_ID;
        this.PL_AREA_CREATE_DATE = PL_AREA_CREATE_DATE;
        this.Valid_Flag = Valid_Flag;
        this.PlanId = PlanId;
        this.AREA_NORNAL = AREA_NORNAL;
        this.AREA_FINISH = AREA_FINISH;
        this.fk_plan = fk_plan;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getAreaListDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Integer getPL_AREA_ID() {
        return PL_AREA_ID;
    }

    public void setPL_AREA_ID(Integer PL_AREA_ID) {
        this.PL_AREA_ID = PL_AREA_ID;
    }

    public String getPL_AREA_NAME() {
        return PL_AREA_NAME;
    }

    public void setPL_AREA_NAME(String PL_AREA_NAME) {
        this.PL_AREA_NAME = PL_AREA_NAME;
    }

    public String getPL_AREA_LABEL() {
        return PL_AREA_LABEL;
    }

    public void setPL_AREA_LABEL(String PL_AREA_LABEL) {
        this.PL_AREA_LABEL = PL_AREA_LABEL;
    }

    public String getPL_AREA_CREATE_ID() {
        return PL_AREA_CREATE_ID;
    }

    public void setPL_AREA_CREATE_ID(String PL_AREA_CREATE_ID) {
        this.PL_AREA_CREATE_ID = PL_AREA_CREATE_ID;
    }

    public String getPL_AREA_CREATE_DATE() {
        return PL_AREA_CREATE_DATE;
    }

    public void setPL_AREA_CREATE_DATE(String PL_AREA_CREATE_DATE) {
        this.PL_AREA_CREATE_DATE = PL_AREA_CREATE_DATE;
    }

    public Integer getValid_Flag() {
        return Valid_Flag;
    }

    public void setValid_Flag(Integer Valid_Flag) {
        this.Valid_Flag = Valid_Flag;
    }

    public String getPlanId() {
        return PlanId;
    }

    public void setPlanId(String PlanId) {
        this.PlanId = PlanId;
    }

    public String getAREA_NORNAL() {
        return AREA_NORNAL;
    }

    public void setAREA_NORNAL(String AREA_NORNAL) {
        this.AREA_NORNAL = AREA_NORNAL;
    }

    public Boolean getAREA_FINISH() {
        return AREA_FINISH;
    }

    public void setAREA_FINISH(Boolean AREA_FINISH) {
        this.AREA_FINISH = AREA_FINISH;
    }

    public Long getFk_plan() {
        return fk_plan;
    }

    public void setFk_plan(Long fk_plan) {
        this.fk_plan = fk_plan;
    }

    /** To-one relationship, resolved on first access. */
    public PlanList getPlanList() {
        Long __key = this.fk_plan;
        if (planList__resolvedKey == null || !planList__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PlanListDao targetDao = daoSession.getPlanListDao();
            PlanList planListNew = targetDao.load(__key);
            synchronized (this) {
                planList = planListNew;
            	planList__resolvedKey = __key;
            }
        }
        return planList;
    }

    public void setPlanList(PlanList planList) {
        synchronized (this) {
            this.planList = planList;
            fk_plan = planList == null ? null : planList.getId();
            planList__resolvedKey = fk_plan;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Equiplist> getEquips() {
        if (equips == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            EquiplistDao targetDao = daoSession.getEquiplistDao();
            List<Equiplist> equipsNew = targetDao._queryAreaList_Equips(id);
            synchronized (this) {
                if(equips == null) {
                    equips = equipsNew;
                }
            }
        }
        return equips;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetEquips() {
        equips = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}

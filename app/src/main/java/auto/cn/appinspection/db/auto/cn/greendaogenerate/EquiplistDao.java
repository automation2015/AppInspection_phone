package auto.cn.greendaogenerate;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import auto.cn.greendaogenerate.Equiplist;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "EQUIPLIST".
*/
public class EquiplistDao extends AbstractDao<Equiplist, Long> {

    public static final String TABLENAME = "EQUIPLIST";

    /**
     * Properties of entity Equiplist.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property EL_NAME = new Property(1, String.class, "EL_NAME", false, "EL__NAME");
        public final static Property EL_Depart_Name = new Property(2, String.class, "EL_Depart_Name", false, "EL__DEPART__NAME");
        public final static Property EL_ID = new Property(3, String.class, "EL_ID", false, "EL__ID");
        public final static Property EL_Type_Name = new Property(4, String.class, "EL_Type_Name", false, "EL__TYPE__NAME");
        public final static Property EL_EIS_ID = new Property(5, String.class, "EL_EIS_ID", false, "EL__EIS__ID");
        public final static Property EL_EIS_NAME = new Property(6, String.class, "EL_EIS_NAME", false, "EL__EIS__NAME");
        public final static Property EL_VALID_FLAG = new Property(7, String.class, "EL_VALID_FLAG", false, "EL__VALID__FLAG");
        public final static Property PL_AREA_ID = new Property(8, Integer.class, "PL_AREA_ID", false, "PL__AREA__ID");
        public final static Property EquipFinish = new Property(9, Boolean.class, "equipFinish", false, "EQUIP_FINISH");
        public final static Property Fk_area = new Property(10, Long.class, "fk_area", false, "FK_AREA");
    };

    private DaoSession daoSession;

    private Query<Equiplist> areaList_EquipsQuery;

    public EquiplistDao(DaoConfig config) {
        super(config);
    }
    
    public EquiplistDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"EQUIPLIST\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"EL__NAME\" TEXT," + // 1: EL_NAME
                "\"EL__DEPART__NAME\" TEXT," + // 2: EL_Depart_Name
                "\"EL__ID\" TEXT," + // 3: EL_ID
                "\"EL__TYPE__NAME\" TEXT," + // 4: EL_Type_Name
                "\"EL__EIS__ID\" TEXT," + // 5: EL_EIS_ID
                "\"EL__EIS__NAME\" TEXT," + // 6: EL_EIS_NAME
                "\"EL__VALID__FLAG\" TEXT," + // 7: EL_VALID_FLAG
                "\"PL__AREA__ID\" INTEGER," + // 8: PL_AREA_ID
                "\"EQUIP_FINISH\" INTEGER," + // 9: equipFinish
                "\"FK_AREA\" INTEGER);"); // 10: fk_area
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"EQUIPLIST\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Equiplist entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String EL_NAME = entity.getEL_NAME();
        if (EL_NAME != null) {
            stmt.bindString(2, EL_NAME);
        }
 
        String EL_Depart_Name = entity.getEL_Depart_Name();
        if (EL_Depart_Name != null) {
            stmt.bindString(3, EL_Depart_Name);
        }
 
        String EL_ID = entity.getEL_ID();
        if (EL_ID != null) {
            stmt.bindString(4, EL_ID);
        }
 
        String EL_Type_Name = entity.getEL_Type_Name();
        if (EL_Type_Name != null) {
            stmt.bindString(5, EL_Type_Name);
        }
 
        String EL_EIS_ID = entity.getEL_EIS_ID();
        if (EL_EIS_ID != null) {
            stmt.bindString(6, EL_EIS_ID);
        }
 
        String EL_EIS_NAME = entity.getEL_EIS_NAME();
        if (EL_EIS_NAME != null) {
            stmt.bindString(7, EL_EIS_NAME);
        }
 
        String EL_VALID_FLAG = entity.getEL_VALID_FLAG();
        if (EL_VALID_FLAG != null) {
            stmt.bindString(8, EL_VALID_FLAG);
        }
 
        Integer PL_AREA_ID = entity.getPL_AREA_ID();
        if (PL_AREA_ID != null) {
            stmt.bindLong(9, PL_AREA_ID);
        }
 
        Boolean equipFinish = entity.getEquipFinish();
        if (equipFinish != null) {
            stmt.bindLong(10, equipFinish ? 1L: 0L);
        }
 
        Long fk_area = entity.getFk_area();
        if (fk_area != null) {
            stmt.bindLong(11, fk_area);
        }
    }

    @Override
    protected void attachEntity(Equiplist entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Equiplist readEntity(Cursor cursor, int offset) {
        Equiplist entity = new Equiplist( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // EL_NAME
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // EL_Depart_Name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // EL_ID
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // EL_Type_Name
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // EL_EIS_ID
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // EL_EIS_NAME
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // EL_VALID_FLAG
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // PL_AREA_ID
            cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0, // equipFinish
            cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10) // fk_area
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Equiplist entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setEL_NAME(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setEL_Depart_Name(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setEL_ID(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setEL_Type_Name(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setEL_EIS_ID(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setEL_EIS_NAME(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setEL_VALID_FLAG(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPL_AREA_ID(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setEquipFinish(cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0);
        entity.setFk_area(cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Equiplist entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Equiplist entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "equips" to-many relationship of AreaList. */
    public List<Equiplist> _queryAreaList_Equips(Long fk_area) {
        synchronized (this) {
            if (areaList_EquipsQuery == null) {
                QueryBuilder<Equiplist> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Fk_area.eq(null));
                areaList_EquipsQuery = queryBuilder.build();
            }
        }
        Query<Equiplist> query = areaList_EquipsQuery.forCurrentThread();
        query.setParameter(0, fk_area);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getAreaListDao().getAllColumns());
            builder.append(" FROM EQUIPLIST T");
            builder.append(" LEFT JOIN AREA_LIST T0 ON T.\"FK_AREA\"=T0.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Equiplist loadCurrentDeep(Cursor cursor, boolean lock) {
        Equiplist entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        AreaList areaList = loadCurrentOther(daoSession.getAreaListDao(), cursor, offset);
        entity.setAreaList(areaList);

        return entity;    
    }

    public Equiplist loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Equiplist> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Equiplist> list = new ArrayList<Equiplist>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Equiplist> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Equiplist> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}

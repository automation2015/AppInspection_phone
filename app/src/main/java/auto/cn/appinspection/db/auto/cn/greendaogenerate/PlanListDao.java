package auto.cn.greendaogenerate;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import auto.cn.greendaogenerate.PlanList;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PLAN_LIST".
*/
public class PlanListDao extends AbstractDao<PlanList, Long> {

    public static final String TABLENAME = "PLAN_LIST";

    /**
     * Properties of entity PlanList.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property PLAN_ID = new Property(1, String.class, "PLAN_ID", false, "PLAN__ID");
        public final static Property PLAN_NAME = new Property(2, String.class, "PLAN_NAME", false, "PLAN__NAME");
        public final static Property PLAN_ORG_NAME = new Property(3, String.class, "PLAN_ORG_NAME", false, "PLAN__ORG__NAME");
        public final static Property PLAN_PART_NAME = new Property(4, String.class, "PLAN_PART_NAME", false, "PLAN__PART__NAME");
        public final static Property PLAN_PART_ID = new Property(5, String.class, "PLAN_PART_ID", false, "PLAN__PART__ID");
        public final static Property PLAN_NUM = new Property(6, Integer.class, "PLAN_NUM", false, "PLAN__NUM");
        public final static Property PLAN_CYCLE_TYPE = new Property(7, Integer.class, "PLAN_CYCLE_TYPE", false, "PLAN__CYCLE__TYPE");
        public final static Property PLAN_LAST_DATE = new Property(8, String.class, "PLAN_LAST_DATE", false, "PLAN__LAST__DATE");
        public final static Property PLAN_LAST_USER_NAME = new Property(9, String.class, "PLAN_LAST_USER_NAME", false, "PLAN__LAST__USER__NAME");
        public final static Property PLAN_CREATE_DATE = new Property(10, String.class, "PLAN_CREATE_DATE", false, "PLAN__CREATE__DATE");
        public final static Property Valid_Flag = new Property(11, String.class, "Valid_Flag", false, "VALID__FLAG");
        public final static Property Shift = new Property(12, String.class, "Shift", false, "SHIFT");
        public final static Property CODE_NAME = new Property(13, String.class, "CODE_NAME", false, "CODE__NAME");
        public final static Property ES_CLASS_NAME = new Property(14, String.class, "ES_CLASS_NAME", false, "ES__CLASS__NAME");
        public final static Property ES_START_DATE = new Property(15, String.class, "ES_START_DATE", false, "ES__START__DATE");
        public final static Property ES_END_DATE = new Property(16, String.class, "ES_END_DATE", false, "ES__END__DATE");
        public final static Property ES_USER_NAME = new Property(17, String.class, "ES_USER_NAME", false, "ES__USER__NAME");
        public final static Property Upload_time = new Property(18, String.class, "upload_time", false, "UPLOAD_TIME");
        public final static Property PlanFinish = new Property(19, Boolean.class, "planFinish", false, "PLAN_FINISH");
    };

    private DaoSession daoSession;


    public PlanListDao(DaoConfig config) {
        super(config);
    }
    
    public PlanListDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PLAN_LIST\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"PLAN__ID\" TEXT," + // 1: PLAN_ID
                "\"PLAN__NAME\" TEXT," + // 2: PLAN_NAME
                "\"PLAN__ORG__NAME\" TEXT," + // 3: PLAN_ORG_NAME
                "\"PLAN__PART__NAME\" TEXT," + // 4: PLAN_PART_NAME
                "\"PLAN__PART__ID\" TEXT," + // 5: PLAN_PART_ID
                "\"PLAN__NUM\" INTEGER," + // 6: PLAN_NUM
                "\"PLAN__CYCLE__TYPE\" INTEGER," + // 7: PLAN_CYCLE_TYPE
                "\"PLAN__LAST__DATE\" TEXT," + // 8: PLAN_LAST_DATE
                "\"PLAN__LAST__USER__NAME\" TEXT," + // 9: PLAN_LAST_USER_NAME
                "\"PLAN__CREATE__DATE\" TEXT," + // 10: PLAN_CREATE_DATE
                "\"VALID__FLAG\" TEXT," + // 11: Valid_Flag
                "\"SHIFT\" TEXT," + // 12: Shift
                "\"CODE__NAME\" TEXT," + // 13: CODE_NAME
                "\"ES__CLASS__NAME\" TEXT," + // 14: ES_CLASS_NAME
                "\"ES__START__DATE\" TEXT," + // 15: ES_START_DATE
                "\"ES__END__DATE\" TEXT," + // 16: ES_END_DATE
                "\"ES__USER__NAME\" TEXT," + // 17: ES_USER_NAME
                "\"UPLOAD_TIME\" TEXT," + // 18: upload_time
                "\"PLAN_FINISH\" INTEGER);"); // 19: planFinish
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PLAN_LIST\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, PlanList entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String PLAN_ID = entity.getPLAN_ID();
        if (PLAN_ID != null) {
            stmt.bindString(2, PLAN_ID);
        }
 
        String PLAN_NAME = entity.getPLAN_NAME();
        if (PLAN_NAME != null) {
            stmt.bindString(3, PLAN_NAME);
        }
 
        String PLAN_ORG_NAME = entity.getPLAN_ORG_NAME();
        if (PLAN_ORG_NAME != null) {
            stmt.bindString(4, PLAN_ORG_NAME);
        }
 
        String PLAN_PART_NAME = entity.getPLAN_PART_NAME();
        if (PLAN_PART_NAME != null) {
            stmt.bindString(5, PLAN_PART_NAME);
        }
 
        String PLAN_PART_ID = entity.getPLAN_PART_ID();
        if (PLAN_PART_ID != null) {
            stmt.bindString(6, PLAN_PART_ID);
        }
 
        Integer PLAN_NUM = entity.getPLAN_NUM();
        if (PLAN_NUM != null) {
            stmt.bindLong(7, PLAN_NUM);
        }
 
        Integer PLAN_CYCLE_TYPE = entity.getPLAN_CYCLE_TYPE();
        if (PLAN_CYCLE_TYPE != null) {
            stmt.bindLong(8, PLAN_CYCLE_TYPE);
        }
 
        String PLAN_LAST_DATE = entity.getPLAN_LAST_DATE();
        if (PLAN_LAST_DATE != null) {
            stmt.bindString(9, PLAN_LAST_DATE);
        }
 
        String PLAN_LAST_USER_NAME = entity.getPLAN_LAST_USER_NAME();
        if (PLAN_LAST_USER_NAME != null) {
            stmt.bindString(10, PLAN_LAST_USER_NAME);
        }
 
        String PLAN_CREATE_DATE = entity.getPLAN_CREATE_DATE();
        if (PLAN_CREATE_DATE != null) {
            stmt.bindString(11, PLAN_CREATE_DATE);
        }
 
        String Valid_Flag = entity.getValid_Flag();
        if (Valid_Flag != null) {
            stmt.bindString(12, Valid_Flag);
        }
 
        String Shift = entity.getShift();
        if (Shift != null) {
            stmt.bindString(13, Shift);
        }
 
        String CODE_NAME = entity.getCODE_NAME();
        if (CODE_NAME != null) {
            stmt.bindString(14, CODE_NAME);
        }
 
        String ES_CLASS_NAME = entity.getES_CLASS_NAME();
        if (ES_CLASS_NAME != null) {
            stmt.bindString(15, ES_CLASS_NAME);
        }
 
        String ES_START_DATE = entity.getES_START_DATE();
        if (ES_START_DATE != null) {
            stmt.bindString(16, ES_START_DATE);
        }
 
        String ES_END_DATE = entity.getES_END_DATE();
        if (ES_END_DATE != null) {
            stmt.bindString(17, ES_END_DATE);
        }
 
        String ES_USER_NAME = entity.getES_USER_NAME();
        if (ES_USER_NAME != null) {
            stmt.bindString(18, ES_USER_NAME);
        }
 
        String upload_time = entity.getUpload_time();
        if (upload_time != null) {
            stmt.bindString(19, upload_time);
        }
 
        Boolean planFinish = entity.getPlanFinish();
        if (planFinish != null) {
            stmt.bindLong(20, planFinish ? 1L: 0L);
        }
    }

    @Override
    protected void attachEntity(PlanList entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public PlanList readEntity(Cursor cursor, int offset) {
        PlanList entity = new PlanList( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // PLAN_ID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // PLAN_NAME
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // PLAN_ORG_NAME
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // PLAN_PART_NAME
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // PLAN_PART_ID
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // PLAN_NUM
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // PLAN_CYCLE_TYPE
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // PLAN_LAST_DATE
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // PLAN_LAST_USER_NAME
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // PLAN_CREATE_DATE
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // Valid_Flag
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // Shift
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // CODE_NAME
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // ES_CLASS_NAME
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // ES_START_DATE
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // ES_END_DATE
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // ES_USER_NAME
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // upload_time
            cursor.isNull(offset + 19) ? null : cursor.getShort(offset + 19) != 0 // planFinish
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, PlanList entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPLAN_ID(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPLAN_NAME(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPLAN_ORG_NAME(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPLAN_PART_NAME(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPLAN_PART_ID(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPLAN_NUM(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setPLAN_CYCLE_TYPE(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setPLAN_LAST_DATE(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setPLAN_LAST_USER_NAME(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setPLAN_CREATE_DATE(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setValid_Flag(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setShift(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setCODE_NAME(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setES_CLASS_NAME(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setES_START_DATE(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setES_END_DATE(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setES_USER_NAME(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setUpload_time(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setPlanFinish(cursor.isNull(offset + 19) ? null : cursor.getShort(offset + 19) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(PlanList entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(PlanList entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
